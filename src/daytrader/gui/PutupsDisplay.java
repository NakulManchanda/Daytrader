/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package daytrader.gui;

import daytrader.datamodel.AbstractGraphPoint;
import daytrader.datamodel.BaseGraph;
import daytrader.datamodel.DTConstants;
import daytrader.datamodel.PrimeDataModel;
import daytrader.datamodel.Putup;
import daytrader.datamodel.RealTimeRunManager;
import daytrader.datamodel.RealTimeRunRecord;
import daytrader.datamodel.XmlFileFilter;
import daytrader.historicRequestSystem.HRSCallableWrapper;
import daytrader.historicRequestSystem.HistoricRequestProcessingSystem;
import daytrader.historicRequestSystem.callbacks.UpdateToHistoricDataCallback;
import daytradertasks.LoadHistoricDataBatchTask;
import java.awt.GridLayout;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Roy
 */
public class PutupsDisplay extends javax.swing.JPanel {

    //private PrimeDataModel dataModel = null; 
    /**
     * Creates new form PutupsDisplay
     */
    public PutupsDisplay() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlControls = new javax.swing.JPanel();
        btndAddTicker = new javax.swing.JButton();
        btnRemoveTicker = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnPreLoad = new javax.swing.JButton();
        btnShowPreLoadStatus = new javax.swing.JButton();
        btnRecover = new javax.swing.JButton();
        btnSelectAll = new javax.swing.JButton();
        btnDeselect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPutups = new daytrader.gui.tables.PutupJTableTwo();
        pnlRunningControls = new javax.swing.JPanel();
        btnSaveGraphs = new javax.swing.JButton();
        btnUpdateToHistoric = new javax.swing.JButton();
        txtAddToFileName = new javax.swing.JTextField();
        btnTestBreak = new javax.swing.JButton();

        pnlControls.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        btndAddTicker.setLabel("Add Ticker");
        btndAddTicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndAddTickerActionPerformed(evt);
            }
        });

        btnRemoveTicker.setText("Remove Ticker");
        btnRemoveTicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTickerActionPerformed(evt);
            }
        });

        btnSave.setText("Save Putups");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnStart.setText("Start Real Time Run");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnPreLoad.setText("Pre-Load data");
        btnPreLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreLoadActionPerformed(evt);
            }
        });

        btnShowPreLoadStatus.setText("Show Pre-Load Status");
        btnShowPreLoadStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPreLoadStatusActionPerformed(evt);
            }
        });

        btnRecover.setText("Recover Real Time Run");
        btnRecover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecoverActionPerformed(evt);
            }
        });

        btnSelectAll.setText("Select All");
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });

        btnDeselect.setText("Deselect All");
        btnDeselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeselectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlsLayout = new javax.swing.GroupLayout(pnlControls);
        pnlControls.setLayout(pnlControlsLayout);
        pnlControlsLayout.setHorizontalGroup(
            pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlControlsLayout.createSequentialGroup()
                        .addComponent(btndAddTicker)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveTicker)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPreLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnShowPreLoadStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRecover)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStart))
                    .addGroup(pnlControlsLayout.createSequentialGroup()
                        .addComponent(btnSelectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeselect)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        pnlControlsLayout.setVerticalGroup(
            pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btndAddTicker)
                    .addComponent(btnRemoveTicker)
                    .addComponent(btnSave)
                    .addComponent(btnPreLoad)
                    .addComponent(btnShowPreLoadStatus)
                    .addComponent(btnRecover)
                    .addComponent(btnStart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectAll)
                    .addComponent(btnDeselect))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(tblPutups);

        pnlRunningControls.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        btnSaveGraphs.setText("Save All Data");
        btnSaveGraphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveGraphsActionPerformed(evt);
            }
        });

        btnUpdateToHistoric.setText("Update to Historical Data");
        btnUpdateToHistoric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateToHistoricActionPerformed(evt);
            }
        });

        txtAddToFileName.setText("BEFORE");

        btnTestBreak.setText("Test Break");
        btnTestBreak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestBreakActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlRunningControlsLayout = new javax.swing.GroupLayout(pnlRunningControls);
        pnlRunningControls.setLayout(pnlRunningControlsLayout);
        pnlRunningControlsLayout.setHorizontalGroup(
            pnlRunningControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRunningControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSaveGraphs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAddToFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(btnTestBreak)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdateToHistoric)
                .addContainerGap())
        );
        pnlRunningControlsLayout.setVerticalGroup(
            pnlRunningControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRunningControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRunningControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveGraphs)
                    .addComponent(btnUpdateToHistoric)
                    .addComponent(txtAddToFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTestBreak))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlRunningControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlRunningControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btndAddTickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndAddTickerActionPerformed
        // TODO add your handling code here:
        addNewTicker();
    }//GEN-LAST:event_btndAddTickerActionPerformed

    private void btnRemoveTickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTickerActionPerformed
        // TODO add your handling code here:
        removeSelectedTicker();
    }//GEN-LAST:event_btnRemoveTickerActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        savePutups();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        startMonitoring();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnSaveGraphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveGraphsActionPerformed
        // TODO add your handling code here:
        saveAllGraphs();
    }//GEN-LAST:event_btnSaveGraphsActionPerformed

    private void btnUpdateToHistoricActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateToHistoricActionPerformed
        // TODO add your handling code here:
        updateToHistoric();
    }//GEN-LAST:event_btnUpdateToHistoricActionPerformed

    private void btnPreLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreLoadActionPerformed
        // TODO add your handling code here:
        preLoad();
    }//GEN-LAST:event_btnPreLoadActionPerformed

    private void btnTestBreakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestBreakActionPerformed
        // TODO add your handling code here:
        testBreak();
    }//GEN-LAST:event_btnTestBreakActionPerformed

    private void btnShowPreLoadStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPreLoadStatusActionPerformed
        // TODO add your handling code here:
        showPreLoadStatus();
    }//GEN-LAST:event_btnShowPreLoadStatusActionPerformed

    private void btnRecoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecoverActionPerformed
        // TODO add your handling code here:
        recoverPreviousRun();
    }//GEN-LAST:event_btnRecoverActionPerformed

    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        // TODO add your handling code here:
        selectAllPutups();
    }//GEN-LAST:event_btnSelectAllActionPerformed

    private void btnDeselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeselectActionPerformed
        // TODO add your handling code here:
        deSelectAllPutups();
    }//GEN-LAST:event_btnDeselectActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeselect;
    private javax.swing.JButton btnPreLoad;
    private javax.swing.JButton btnRecover;
    private javax.swing.JButton btnRemoveTicker;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveGraphs;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JButton btnShowPreLoadStatus;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnTestBreak;
    private javax.swing.JButton btnUpdateToHistoric;
    private javax.swing.JButton btndAddTicker;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlControls;
    private javax.swing.JPanel pnlRunningControls;
    private daytrader.gui.tables.PutupJTableTwo tblPutups;
    private javax.swing.JTextField txtAddToFileName;
    // End of variables declaration//GEN-END:variables

    private void addNewTicker() {
        Putup newItem = new Putup();
        this.tblPutups.getMyDataModel().addPutup(newItem);
    }

    private void removeSelectedTicker() {
        int row = this.tblPutups.getSelectedRow();
        int col = this.tblPutups.getSelectedColumn();
        Object value = this.tblPutups.getValueAt(row, col);
        if (value instanceof Putup) {
            Putup item = (Putup) value;
            this.tblPutups.getMyDataModel().removePutup(item);
        }
    }

    private boolean savePutups() {
        boolean result = false;
        if (this.tblPutups.getMyDataModel().getData().savePutups()) {
            result = true;
            JOptionPane.showMessageDialog(null, "Putup data saved to file", "Saved...", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "DATA NOT SAVED! Error writing to file", "Error...", JOptionPane.ERROR_MESSAGE);
        }
        return result;
    }

    private void startMonitoring() {
        //Now lets try this with run records 2 the RunTimeManager system
        PrimeDataModel data = this.tblPutups.getMyDataModel().getData();
        //Make sure a pre-load has been done; any putup not pre-loaded will now be 
        this.preLoad();
        //Get active putup list and build list of managers to submit for real time rules run
        ArrayList<Putup> activePutups = data.getActivePutups();
        ArrayList<RealTimeRunManager> managers = new ArrayList<RealTimeRunManager>();
        for (Putup currPutup : activePutups) {
            for (RealTimeRunManager currManager : DTConstants.getRunningRecords2()) {
                if (currManager.isThisPutup(currPutup)) {
                    managers.add(currManager);
                    break;
                }
            }
        }
        //Now submit all managers in the array list to start their real time rules testing
        //Initialise thread pool based on number of active putups
        ExecutorService exec = Executors.newFixedThreadPool(activePutups.size() + 1);
        ExecutorCompletionService service = new ExecutorCompletionService(exec);
        for (RealTimeRunManager currManager : managers) {
            service.submit(currManager);
        }
        //Now store the actually running putup managers and disable real time run button and pre load buttons
        this.btnPreLoad.setEnabled(false);
        this.btnStart.setEnabled(false);
        DTConstants.setRunningRecords2(managers);
        DTConstants.STATUS_DISPLAY.generateStatusDisplay();
    }

    private void saveAllGraphs() {
        ArrayList<RealTimeRunRecord> runningRecords = DTConstants.getRunningRecords();
        if (null != runningRecords && 0 < runningRecords.size()) {
            ArrayList<BaseGraph<AbstractGraphPoint>> graphList = new ArrayList<BaseGraph<AbstractGraphPoint>>();
            for (RealTimeRunRecord currRec : runningRecords) {
                BaseGraph<AbstractGraphPoint> graph = currRec.getLoader().getGraph();
                graphList.add(graph);
            }

            boolean blnError = false;
            for (BaseGraph<AbstractGraphPoint> currGraph : graphList) {
                if (null != currGraph) {
                    String tickerCode = currGraph.getPutup().getTickerCode();
                    String fName = "RTGraph_" + txtAddToFileName.getText() + "_" + tickerCode + ".csv";
                    File myFile = new File(fName);
                    if (myFile.exists()) {
                        myFile.delete();
                    }
                    BufferedWriter writer = null;
                    try {
                        myFile.createNewFile();
                        FileWriter fos = new FileWriter(myFile);
                        writer = new BufferedWriter(fos);
                        writer.write(currGraph.toCSVString());
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(DebugDisplay.class.getName()).log(Level.SEVERE, null, ex);
                        blnError = true;
                        JOptionPane.showMessageDialog(null, ex.getMessage() + ": " + tickerCode, "File not found...", JOptionPane.ERROR_MESSAGE);
                    } catch (IOException ex) {
                        Logger.getLogger(DebugDisplay.class.getName()).log(Level.SEVERE, null, ex);
                        blnError = true;
                        JOptionPane.showMessageDialog(null, "Data Not Saved For: " + tickerCode, "Error...", JOptionPane.INFORMATION_MESSAGE);
                    } finally {
                        if (null != writer) {
                            try {
                                writer.close();
                            } catch (IOException ex) {
                                Logger.getLogger(DebugDisplay.class.getName()).log(Level.SEVERE, null, ex);
                                blnError = true;
                            }
                        }
                    }
                } else {
                    blnError = true;
                    JOptionPane.showMessageDialog(null, "No Graph to save", "No Graph", JOptionPane.ERROR_MESSAGE);
                }
            }
            if (!blnError) {
                JOptionPane.showMessageDialog(null, "All data was saved", "Saved...", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving real time data", "Error saving...", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            if (null == runningRecords) {
                JOptionPane.showMessageDialog(null, "RunningRecords is NULL", "NULL", JOptionPane.ERROR_MESSAGE);
            } else if (0 < runningRecords.size()) {
                JOptionPane.showMessageDialog(null, "RunningRecords has 0 size", "ZERO", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void updateToHistoric() {
        //This method loads the last 30 minutes of each running graph's historic data
        Calendar dateTime = Calendar.getInstance(DTConstants.EXCH_TIME_ZONE);
        dateTime.setTimeInMillis(System.currentTimeMillis());
        ArrayList<RealTimeRunRecord> runningRecords = DTConstants.getRunningRecords();
        HistoricRequestProcessingSystem HRSys = HistoricRequestProcessingSystem.getInstance();
        for (RealTimeRunRecord currRec : runningRecords) {
            BaseGraph<AbstractGraphPoint> graph = currRec.getLoader().getRawGraph();
            Putup putup = graph.getPutup();
            UpdateToHistoricDataCallback cb = new UpdateToHistoricDataCallback(graph, true);
            LoadHistoricDataBatchTask task = new LoadHistoricDataBatchTask(putup, dateTime, cb);
            HRSCallableWrapper wrapper = new HRSCallableWrapper(task);
            HRSys.submitRequest(wrapper);
        }
    }

    private void preLoad() {
        if (this.savePutups()) {
            PrimeDataModel data = this.tblPutups.getMyDataModel().getData();
            for (Putup currPutup : data) {
                if (currPutup.isActive()) {
                    //Check to see if this item has a RealTimeRunManager
                    RealTimeRunManager manager = null;
                    for (RealTimeRunManager currManager : DTConstants.getRunningRecords2()) {
                        if (currManager.isThisPutup(currPutup)) {
                            manager = currManager;
                            break;
                        }
                    }
                    //If no manager was found create one and add to the list
                    if (null == manager) {
                        manager = new RealTimeRunManager(currPutup, true);
                        DTConstants.addRunningRecord2(manager);
                    }
                    //Now we will have a manager do the preload
                    manager.preLoadData();
                }
            }
        }
    }

    private void testBreak() {
        ArrayList<RealTimeRunManager> runningRecords2 = DTConstants.getRunningRecords2();
        RealTimeRunManager get = runningRecords2.get(0);
        BaseGraph<AbstractGraphPoint> graph = get.getGraph5SecBars();
        BaseGraph<AbstractGraphPoint> graphReqMarketData = get.getGraphReqMarketData();
        int gSize = graph.size();
        System.out.println("Size of Graph = " + gSize);
        System.out.println("BREAK");
    }

    private void showPreLoadStatus() {
        JFrame status = new JFrame("Pre-Load Status");
        PrimeDataModel data = this.tblPutups.getMyDataModel().getData();
        status.setLayout(new GridLayout(data.getAllPutupsList().size(), 1));
        for (Putup currPutup : data) {
            YLineLoadingDisplay progDisplay = currPutup.getProgressDisplayYLines();
            status.add(progDisplay);
        }
        status.pack();
        status.setVisible(true);
    }

    private void recoverPreviousRun() {
        //Use this command to recover from a crash or other loss of data / shutdown during the day
        //Test to see if recovery folder exists
        File recoveryFolder = DTConstants.getRecoveryFolder();
        if (recoveryFolder.exists()) {
            if (recoveryFolder.canRead()) {
                //Get a List of all XML files in the folder.
                FileFilter xmlFilter = new XmlFileFilter();
                File[] fileList = recoveryFolder.listFiles(xmlFilter);
                ArrayList<RealTimeRunManager> recoveredManagers = new ArrayList<RealTimeRunManager>();
                if (0 < fileList.length) {
                    //We have XML Files to load RealTimeRunManagers from
                    for (File currFile : fileList) {
                        RealTimeRunManager loadedManager = RealTimeRunManager.loadManagerFromXMLFile(currFile);
                        if (null != loadedManager) {
                            recoveredManagers.add(loadedManager);
                        }
                    }
                    //Now for each recovered manager update Prime Model Putups and then start it running again
                    PrimeDataModel data = this.tblPutups.getMyDataModel().getData();
                    if (0 < recoveredManagers.size()) {
                        data.clearAllPutups();
                        //Setup Prime Data Model with recovered putups
                        for (RealTimeRunManager manager : recoveredManagers) {
                            Putup myPutup = manager.getMyPutup();
                            data.addPutup(myPutup);
                        }
                        //Submit RealTimeRunManagers for execution
                        ArrayList<Putup> activePutups = data.getActivePutups();
                        //Initialise thread pool based on number of active putups
                        ExecutorService exec = Executors.newFixedThreadPool(activePutups.size() + 1);
                        ExecutorCompletionService service = new ExecutorCompletionService(exec);
                        for (RealTimeRunManager currManager : recoveredManagers) {
                            if (currManager.getMyPutup().isActive()) {
                                service.submit(currManager);
                            }
                        }
                        //Now store the actually running putup managers and disable real time run button and pre load buttons
                        this.btnPreLoad.setEnabled(false);
                        this.btnStart.setEnabled(false);
                        DTConstants.setRunningRecords2(recoveredManagers);
                        DTConstants.STATUS_DISPLAY.generateStatusDisplay();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No XML files found in recovery folder", "Error in recovery operation", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Recover Folder cannot be read", "Error in recovery operation", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Recover Folder does not exist", "Error in recovery operation", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void selectAllPutups() {
        PrimeDataModel data = this.tblPutups.getMyDataModel().getData();
        ArrayList<Putup> allPutupsList = data.getAllPutupsList();
        for(Putup currPutup : allPutupsList){
            if(!currPutup.isActive()){
                currPutup.setActive(true);
            }
        }
        this.tblPutups.getMyDataModel().fireTableStructureChanged();
    }

    private void deSelectAllPutups() {
        PrimeDataModel data = this.tblPutups.getMyDataModel().getData();
        ArrayList<Putup> allPutupsList = data.getAllPutupsList();
        for(Putup currPutup : allPutupsList){
            if(currPutup.isActive()){
                currPutup.setActive(false);
            }
        }
        this.tblPutups.getMyDataModel().fireTableStructureChanged();
    }
}
