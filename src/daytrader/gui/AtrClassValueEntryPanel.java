/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package daytrader.gui;

import daytrader.datamodel.AtrClassEnum;
import daytrader.datamodel.AtrClassValue;
import daytrader.datamodel.DTConstants;
import daytrader.utils.DTUtil;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Roy
 */
public class AtrClassValueEntryPanel extends javax.swing.JPanel implements TableCellRenderer {
    
    private AtrClassValue atrValue = new AtrClassValue();
    private Changes changes;

    /**
     * Creates new form AtrClassValueEntryPanel
     */
    public AtrClassValueEntryPanel() {
        initComponents();
        this.refreshDisplay();
        changes = new Changes();
        this.addChangesListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pnlContainer = new javax.swing.JPanel();
        lblAtrClass = new javax.swing.JLabel();
        cbxAtrClass = new javax.swing.JComboBox();
        pnlEndTime = new javax.swing.JPanel();
        spnEndHr = new javax.swing.JSpinner();
        lblEndHr = new javax.swing.JLabel();
        lblEndHeader = new javax.swing.JLabel();
        spnEndMin = new javax.swing.JSpinner();
        lblEndMin = new javax.swing.JLabel();
        spnEndSecs = new javax.swing.JSpinner();
        lblEndSec = new javax.swing.JLabel();
        spnStartValue = new javax.swing.JSpinner();
        lblStartValue = new javax.swing.JLabel();
        lblEndValue = new javax.swing.JLabel();
        spnEndValue = new javax.swing.JSpinner();
        pnlStartTime = new javax.swing.JPanel();
        spnStartHr = new javax.swing.JSpinner();
        lblStartHr = new javax.swing.JLabel();
        lblStartHeader = new javax.swing.JLabel();
        spnStartMin = new javax.swing.JSpinner();
        lblStartMin = new javax.swing.JLabel();
        spnStartSecs = new javax.swing.JSpinner();
        lblStartSec = new javax.swing.JLabel();

        lblAtrClass.setText("Atr Class: ");

        cbxAtrClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        pnlEndTime.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        spnEndHr.setModel(new javax.swing.SpinnerNumberModel(16, 0, 23, 1));

        lblEndHr.setText("Hr");

        lblEndHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEndHeader.setText("End Time");
        lblEndHeader.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        spnEndMin.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        lblEndMin.setText("Min(s)");

        spnEndSecs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        lblEndSec.setText("Sec(s)");

        javax.swing.GroupLayout pnlEndTimeLayout = new javax.swing.GroupLayout(pnlEndTime);
        pnlEndTime.setLayout(pnlEndTimeLayout);
        pnlEndTimeLayout.setHorizontalGroup(
            pnlEndTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEndTimeLayout.createSequentialGroup()
                .addComponent(spnEndHr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEndHr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnEndMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEndMin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnEndSecs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEndSec))
            .addComponent(lblEndHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlEndTimeLayout.setVerticalGroup(
            pnlEndTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEndTimeLayout.createSequentialGroup()
                .addComponent(lblEndHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEndTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnEndHr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEndHr)
                    .addComponent(spnEndMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEndMin)
                    .addComponent(spnEndSecs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEndSec))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        spnStartValue.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 1.0d, 0.001d));

        lblStartValue.setText("Start Value: ");

        lblEndValue.setText("End Value: ");

        spnEndValue.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 1.0d, 0.001d));

        pnlStartTime.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        spnStartHr.setModel(new javax.swing.SpinnerNumberModel(9, 0, 23, 1));

        lblStartHr.setText("Hr");

        lblStartHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStartHeader.setText("Start Time");
        lblStartHeader.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        spnStartMin.setModel(new javax.swing.SpinnerNumberModel(30, 0, 59, 1));

        lblStartMin.setText("Min(s)");

        spnStartSecs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        lblStartSec.setText("Sec(s)");

        javax.swing.GroupLayout pnlStartTimeLayout = new javax.swing.GroupLayout(pnlStartTime);
        pnlStartTime.setLayout(pnlStartTimeLayout);
        pnlStartTimeLayout.setHorizontalGroup(
            pnlStartTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStartTimeLayout.createSequentialGroup()
                .addComponent(spnStartHr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStartHr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnStartMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStartMin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnStartSecs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStartSec))
            .addComponent(lblStartHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlStartTimeLayout.setVerticalGroup(
            pnlStartTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStartTimeLayout.createSequentialGroup()
                .addComponent(lblStartHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlStartTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnStartHr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStartHr)
                    .addComponent(spnStartMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStartMin)
                    .addComponent(spnStartSecs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStartSec))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlContainerLayout = new javax.swing.GroupLayout(pnlContainer);
        pnlContainer.setLayout(pnlContainerLayout);
        pnlContainerLayout.setHorizontalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlContainerLayout.createSequentialGroup()
                        .addComponent(lblAtrClass)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxAtrClass, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblStartValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnStartValue, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblEndValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnEndValue))
                    .addGroup(pnlContainerLayout.createSequentialGroup()
                        .addComponent(pnlStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 340, Short.MAX_VALUE))
        );
        pnlContainerLayout.setVerticalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAtrClass)
                    .addComponent(cbxAtrClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnStartValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStartValue)
                    .addComponent(lblEndValue)
                    .addComponent(spnEndValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(282, Short.MAX_VALUE))
        );

        DefaultComboBoxModel model = new DefaultComboBoxModel(AtrClassEnum.values());
        cbxAtrClass.setModel(model);

        jScrollPane1.setViewportView(pnlContainer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbxAtrClass;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAtrClass;
    private javax.swing.JLabel lblEndHeader;
    private javax.swing.JLabel lblEndHr;
    private javax.swing.JLabel lblEndMin;
    private javax.swing.JLabel lblEndSec;
    private javax.swing.JLabel lblEndValue;
    private javax.swing.JLabel lblStartHeader;
    private javax.swing.JLabel lblStartHr;
    private javax.swing.JLabel lblStartMin;
    private javax.swing.JLabel lblStartSec;
    private javax.swing.JLabel lblStartValue;
    private javax.swing.JPanel pnlContainer;
    private javax.swing.JPanel pnlEndTime;
    private javax.swing.JPanel pnlStartTime;
    private javax.swing.JSpinner spnEndHr;
    private javax.swing.JSpinner spnEndMin;
    private javax.swing.JSpinner spnEndSecs;
    private javax.swing.JSpinner spnEndValue;
    private javax.swing.JSpinner spnStartHr;
    private javax.swing.JSpinner spnStartMin;
    private javax.swing.JSpinner spnStartSecs;
    private javax.swing.JSpinner spnStartValue;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the atrValue
     */
    public AtrClassValue getAtrValue() {
        return atrValue;
    }
    
    private void refreshDisplay(){
        this.cbxAtrClass.setSelectedItem(this.atrValue.getAtrclass());
        this.spnStartValue.setValue(this.atrValue.getStartValue());
        this.spnEndValue.setValue(this.atrValue.getEndValue());
        this.setStartTime();
        this.setEndTime();
        for(Component currComp : this.getComponents()){
            currComp.invalidate();
        }
    }
    
    private void removeChangesListener(){
        this.cbxAtrClass.removeActionListener(changes);
        this.spnStartValue.removeChangeListener(changes);
        this.spnEndValue.removeChangeListener(changes);
        this.spnStartHr.removeChangeListener(changes);
        this.spnStartMin.removeChangeListener(changes);
        this.spnStartSecs.removeChangeListener(changes);
        this.spnEndHr.removeChangeListener(changes);
        this.spnEndMin.removeChangeListener(changes);
        this.spnEndSecs.removeChangeListener(changes);
    }
    
    private void addChangesListener(){
        this.cbxAtrClass.addActionListener(changes);
        this.spnStartValue.addChangeListener(changes);
        this.spnEndValue.addChangeListener(changes);
        this.spnStartHr.addChangeListener(changes);
        this.spnStartMin.addChangeListener(changes);
        this.spnStartSecs.addChangeListener(changes);
        this.spnEndHr.addChangeListener(changes);
        this.spnEndMin.addChangeListener(changes);
        this.spnEndSecs.addChangeListener(changes);
    }
    
    private void setStartTime(){
        Calendar todayStart = Calendar.getInstance(DTConstants.EXCH_TIME_ZONE);
        todayStart.clear();
        todayStart.set(Calendar.HOUR_OF_DAY, DTConstants.EXCH_OPENING_HOUR);
        todayStart.set(Calendar.MINUTE, DTConstants.EXCH_OPENING_MIN);
        todayStart.set(Calendar.SECOND, DTConstants.EXCH_OPENING_SEC);
        long lngTime = todayStart.getTimeInMillis();
        lngTime += this.atrValue.getStartTime();
        
        Calendar startTime = Calendar.getInstance(DTConstants.EXCH_TIME_ZONE);
        startTime.setTimeInMillis(lngTime);
        int hr = startTime.get(Calendar.HOUR_OF_DAY);
        int min = startTime.get(Calendar.MINUTE);
        int sec = startTime.get(Calendar.SECOND);
        this.spnStartHr.setValue(hr);
        this.spnStartMin.setValue(min);
        this.spnStartSecs.setValue(sec);
    }
    
    private void setEndTime(){
        Calendar todayStart = Calendar.getInstance(DTConstants.EXCH_TIME_ZONE);
        todayStart.clear();
        todayStart.set(Calendar.HOUR_OF_DAY, DTConstants.EXCH_OPENING_HOUR);
        todayStart.set(Calendar.MINUTE, DTConstants.EXCH_OPENING_MIN);
        todayStart.set(Calendar.SECOND, DTConstants.EXCH_OPENING_SEC);
        long lngTime = todayStart.getTimeInMillis();
        lngTime += this.atrValue.getEndTime();
        
        Calendar endTime = Calendar.getInstance(DTConstants.EXCH_TIME_ZONE);
        endTime.setTimeInMillis(lngTime);
        int hr = endTime.get(Calendar.HOUR_OF_DAY);
        int min = endTime.get(Calendar.MINUTE);
        int sec = endTime.get(Calendar.SECOND);
        this.spnEndHr.setValue(hr);
        this.spnEndMin.setValue(min);
        this.spnEndSecs.setValue(sec);
    }
    
    private void storeData(){
        Object classItem = this.cbxAtrClass.getSelectedItem();
        if(classItem instanceof AtrClassEnum){
            this.atrValue.setAtrclass((AtrClassEnum)classItem);
        }
        Object startValue = this.spnStartValue.getValue();
        if(startValue instanceof Number){
            Double val = ((Number)startValue).doubleValue();
            this.atrValue.setStartValue(val);
        }
        Object endValue = this.spnEndValue.getValue();
        if(endValue instanceof Number){
            Double val = ((Number)startValue).doubleValue();
            this.atrValue.setEndValue(val);
        }
        this.setModelStartTime();
        this.setModelEndTime();
    }
    
    private void setModelStartTime(){
        Calendar todayStart = Calendar.getInstance(DTConstants.EXCH_TIME_ZONE);
        todayStart.clear();
        todayStart.set(Calendar.HOUR_OF_DAY, DTConstants.EXCH_OPENING_HOUR);
        todayStart.set(Calendar.MINUTE, DTConstants.EXCH_OPENING_MIN);
        todayStart.set(Calendar.SECOND, DTConstants.EXCH_OPENING_SEC);
        long lngTime = todayStart.getTimeInMillis();
        Calendar cal = DTUtil.deepCopyCalendar(todayStart);
        Object hrValue = this.spnStartHr.getValue();
        Object minValue = this.spnStartMin.getValue();
        Object secValue = this.spnStartSecs.getValue();
        if(hrValue instanceof Number){
            Number val = (Number)hrValue;
            cal.set(Calendar.HOUR_OF_DAY, val.intValue());
        }
        if(minValue instanceof Number){
            Number val = (Number)minValue;
            cal.set(Calendar.MINUTE, val.intValue());
        }
        if(secValue instanceof Number){
            Number val = (Number)secValue;
            cal.set(Calendar.SECOND, val.intValue());
        }
        Long val = cal.getTimeInMillis() - lngTime;
        this.atrValue.setStartTime(val.intValue());
    }
    
    private void setModelEndTime(){
        Calendar todayStart = Calendar.getInstance(DTConstants.EXCH_TIME_ZONE);
        todayStart.clear();
        todayStart.set(Calendar.HOUR_OF_DAY, DTConstants.EXCH_OPENING_HOUR);
        todayStart.set(Calendar.MINUTE, DTConstants.EXCH_OPENING_MIN);
        todayStart.set(Calendar.SECOND, DTConstants.EXCH_OPENING_SEC);
        long lngTime = todayStart.getTimeInMillis();
        Calendar cal = DTUtil.deepCopyCalendar(todayStart);
        Object hrValue = this.spnEndHr.getValue();
        Object minValue = this.spnEndMin.getValue();
        Object secValue = this.spnEndSecs.getValue();
        if(hrValue instanceof Number){
            Number val = (Number)hrValue;
            cal.set(Calendar.HOUR_OF_DAY, val.intValue());
        }
        if(minValue instanceof Number){
            Number val = (Number)minValue;
            cal.set(Calendar.MINUTE, val.intValue());
        }
        if(secValue instanceof Number){
            Number val = (Number)secValue;
            cal.set(Calendar.SECOND, val.intValue());
        }
        Long val = cal.getTimeInMillis() - lngTime;
        this.atrValue.setEndTime(val.intValue());
    }

    /**
     * @param atrValue the atrValue to set
     */
    public void setAtrValue(AtrClassValue atrValue) {
        this.removeChangesListener();
        this.atrValue = atrValue;
        this.refreshDisplay();
        this.addChangesListener();
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        if(value instanceof AtrClassValue){
            this.setAtrValue((AtrClassValue)value);
        }
        return this;
    }

    
    private class Changes implements ActionListener, ChangeListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            storeData();
        }

        @Override
        public void stateChanged(ChangeEvent e) {
            storeData();
        }
    }
}
